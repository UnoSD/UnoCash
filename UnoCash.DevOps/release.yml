parameters:
  - name: pulumi_backend_resource_group
    type: string
    default: Pulumi
    
  - name: pulumi_backend_location
    type: string
    default: WestEurope
    
  - name: pulumi_keyvault_key
    type: string
    default: pulumi
    
  - name: secrets_provider_keyvault_name
    type: string
    default: $(secrets-provider-keyvault-name)

  - name: backend_storage_account_name
    type: string
    default: $(backend-storage-account-name)
    
  - name: azure_subscription
    type: string
    default: $(azure-subscription)

  - name: whitelist_ip
    type: string
    default: $(whitelist-ip)

pool:
  vmImage: ubuntu-latest

stages:

- stage: Set_up
  displayName: Set up deployment resources
  dependsOn: []
  jobs:
    - job: Pulumi
      steps:
      - task: AzureCLI@2
        displayName: Create backend storage
        env:
          PULUMI_CONFIG_PASSPHRASE:
          AZURE_STORAGE_ACCOUNT: ${{ parameters.backend_storage_account_name }}
        inputs:
          azureSubscription: ${{ parameters.azure_subscription }}
          scriptType: bash
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: |
            az group create \
              -l ${{ parameters.pulumi_backend_location }} \
              -n ${{ parameters.pulumi_backend_resource_group }}
            az storage account create \
              -n ${{ parameters.backend_storage_account_name }} \
              -g ${{ parameters.pulumi_backend_resource_group }} \
              -l ${{ parameters.pulumi_backend_location }} \
              --sku Standard_LRS
            az storage container create \
              -n unocash \
              --account-name ${{ parameters.backend_storage_account_name }}
            az keyvault create \
              --location ${{ parameters.pulumi_backend_location }} \
              --name ${{ parameters.secrets_provider_keyvault_name }} \
              --resource-group ${{ parameters.pulumi_backend_resource_group }}
            az keyvault set-policy \
              --name ${{ parameters.secrets_provider_keyvault_name }} \
              --key-permissions encrypt \
              --object-id $(az ad sp show --id $servicePrincipalId --query objectId -o tsv)
            az keyvault key create \
              --name ${{ parameters.pulumi_keyvault_key }} \
              --vault-name ${{ parameters.secrets_provider_keyvault_name }}

            export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
            export SAS_END=$(date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ')
            export AZURE_STORAGE_SAS_TOKEN=$(az storage account generate-sas \
              --permissions cdlruwap \
              --account-name ${{ parameters.backend_storage_account_name }} \
              --services b \
              --resource-types co \
              --expiry $SAS_END \
              -o tsv)

            export ARM_CLIENT_ID=$servicePrincipalId
            export ARM_CLIENT_SECRET=$servicePrincipalKey
            export ARM_TENANT_ID=$tenantId
            export PATH="$PATH:/home/vsts/.pulumi/bin"
            export KEYVAULT="${{ parameters.secrets_provider_keyvault_name }}.vault.azure.net"

            curl -fsSL https://get.pulumi.com | sh

            pulumi login -c azblob://unocash -C UnoCash.Pulumi

            pulumi stack select dev \
              -c \
              -C UnoCash.Pulumi \
              --secrets-provider="azurekeyvault://$KEYVAULT/keys/pulumi"
      
      - task: Cache@2
        displayName: Cache Pulumi installation
        inputs:
          key: pulumi
          path: /home/vsts/.pulumi

- stage: Development_preview
  displayName: Development preview
  dependsOn: Set_up
  jobs:
    - job: Preview
      steps:
        - checkout: self
          
        - task: DownloadBuildArtifacts@0
          displayName: Download build artifacts for Fable
          inputs:
            buildType: specific
            project: '44f232b3-0809-4f97-bac6-30d169f0187d'
            pipeline: '4'
            specificBuildWithTriggering: true
            buildVersionToDownload: latest
            downloadType: single
            artifactName: UnoCash.Fulma
            downloadPath: $(System.ArtifactsDirectory)
            
        - task: DownloadBuildArtifacts@0
          displayName: Download build artifacts for API
          inputs:
            buildType: specific
            project: '44f232b3-0809-4f97-bac6-30d169f0187d'
            pipeline: '4'
            specificBuildWithTriggering: true
            buildVersionToDownload: latest
            downloadType: single
            artifactName: UnoCash.Api
            downloadPath: $(System.ArtifactsDirectory)
          
        - task: AzureCLI@2
          displayName: Pulumi preview
          env:
            PULUMI_CONFIG_PASSPHRASE:
            AZURE_STORAGE_ACCOUNT: ${{ parameters.backend_storage_account_name }}
          inputs:
            azureSubscription: ${{ parameters.azure_subscription }}
            scriptType: bash
            scriptLocation: inlineScript
            addSpnToEnvironment: true
            inlineScript: |
              export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
              export SAS_END=$(date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ')
              export AZURE_STORAGE_SAS_TOKEN=$(az storage account generate-sas \
                --permissions lr \
                --account-name ${{ parameters.backend_storage_account_name }} \
                --services b \
                --resource-types co \
                --expiry $SAS_END \
                -o tsv)
  
              export ARM_CLIENT_ID=$servicePrincipalId
              export ARM_CLIENT_SECRET=$servicePrincipalKey
              export ARM_TENANT_ID=$tenantId
              export PATH="$PATH:/home/vsts/.pulumi/bin"
              export KEYVAULT="${{ parameters.secrets_provider_keyvault_name }}.vault.azure.net"
  
              curl -fsSL https://get.pulumi.com | sh
  
              pulumi login -c azblob://unocash -C UnoCash.Pulumi
  
              pulumi stack select dev \
                -C UnoCash.Pulumi \
                --secrets-provider="azurekeyvault://$KEYVAULT/keys/pulumi"
  
              pulumi config set WhitelistIp "${{ parameters.whitelist_ip }}" -C UnoCash.Pulumi
              pulumi config set ApiBuild "$(System.ArtifactsDirectory)/UnoCash.Api/UnoCash.Api.zip" -C UnoCash.Pulumi
              
              pulumi preview -C UnoCash.Pulumi -v --diff

- stage: Development_deploy
  displayName: Development deploy
  dependsOn: Development_preview
  jobs:
    - deployment: Up
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self                
                
            - task: DownloadBuildArtifacts@0
              displayName: Download build artifacts for API
              inputs:
                buildType: specific
                project: '44f232b3-0809-4f97-bac6-30d169f0187d'
                pipeline: '4'
                specificBuildWithTriggering: true
                buildVersionToDownload: latest
                downloadType: single
                artifactName: UnoCash.Api
                downloadPath: $(System.ArtifactsDirectory)
                
            - task: DownloadBuildArtifacts@0
              displayName: Download build artifacts for Fable
              inputs:
                buildType: specific
                project: '44f232b3-0809-4f97-bac6-30d169f0187d'
                pipeline: '4'
                specificBuildWithTriggering: true
                buildVersionToDownload: latest
                downloadType: single
                artifactName: UnoCash.Fulma
                downloadPath: $(System.ArtifactsDirectory)
                
            - task: AzureCLI@2
              displayName: Pulumi up
              env:
                PULUMI_CONFIG_PASSPHRASE:
                AZURE_STORAGE_ACCOUNT: ${{ parameters.backend_storage_account_name }}
              inputs:
                azureSubscription: ${{ parameters.azure_subscription }}
                scriptType: bash
                scriptLocation: inlineScript
                addSpnToEnvironment: true
                inlineScript: |
                  export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                  export SAS_END=$(date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ')
                  export AZURE_STORAGE_SAS_TOKEN=$(az storage account generate-sas \
                    --permissions lrwc \
                    --account-name ${{ parameters.backend_storage_account_name }} \
                    --services b \
                    --resource-types co \
                    --expiry $SAS_END \
                    -o tsv)
    
                  export ARM_CLIENT_ID=$servicePrincipalId
                  export ARM_CLIENT_SECRET=$servicePrincipalKey
                  export ARM_TENANT_ID=$tenantId
                  export PATH="$PATH:/home/vsts/.pulumi/bin"
                  export KEYVAULT="${{ parameters.secrets_provider_keyvault_name }}.vault.azure.net"
    
                  curl -fsSL https://get.pulumi.com | sh
    
                  pulumi login -c azblob://unocash -C UnoCash.Pulumi
    
                  pulumi stack select dev \
                    -C UnoCash.Pulumi \
                    --secrets-provider="azurekeyvault://$KEYVAULT/keys/pulumi"

                  pulumi config set WhitelistIp "${{ parameters.whitelist_ip }}" -C UnoCash.Pulumi
                  pulumi config set ApiBuild "$(System.ArtifactsDirectory)/UnoCash.Api/UnoCash.Api.zip" -C UnoCash.Pulumi
    
                  pulumi up -C UnoCash.Pulumi --yes
                  
                  echo "##vso[task.setvariable variable=StorageAccount]$(pulumi stack output StorageAccount -C UnoCash.Pulumi)"

            - task: AzureCLI@2
              displayName: Publish static website to blob storage
              env:
                PULUMI_CONFIG_PASSPHRASE:
                AZURE_STORAGE_ACCOUNT: ${{ parameters.backend_storage_account_name }}
              inputs:
                azureSubscription: ${{ parameters.azure_subscription }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  az storage blob upload-batch \
                    -d '$web' \
                    --account-name $(StorageAccount) \
                    -s "$(System.ArtifactsDirectory)/UnoCash.Fulma"
            

- stage: Development_destroy
  displayName: Development destroy
  dependsOn: Set_up
  jobs:
    - deployment: Destroy
      environment: dev_destroy
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self

              - task: AzureCLI@2
                displayName: Pulumi destroy
                env:
                  PULUMI_CONFIG_PASSPHRASE:
                  AZURE_STORAGE_ACCOUNT: ${{ parameters.backend_storage_account_name }}
                inputs:
                  azureSubscription: ${{ parameters.azure_subscription }}
                  scriptType: bash
                  scriptLocation: inlineScript
                  addSpnToEnvironment: true
                  inlineScript: |
                    export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                    export SAS_END=$(date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ')
                    export AZURE_STORAGE_SAS_TOKEN=$(az storage account generate-sas \
                      --permissions lrwc \
                      --account-name ${{ parameters.backend_storage_account_name }} \
                      --services b \
                      --resource-types co \
                      --expiry $SAS_END \
                      -o tsv)

                    export ARM_CLIENT_ID=$servicePrincipalId
                    export ARM_CLIENT_SECRET=$servicePrincipalKey
                    export ARM_TENANT_ID=$tenantId
                    export PATH="$PATH:/home/vsts/.pulumi/bin"
                    export KEYVAULT="${{ parameters.secrets_provider_keyvault_name }}.vault.azure.net"

                    curl -fsSL https://get.pulumi.com | sh

                    pulumi login -c azblob://unocash -C UnoCash.Pulumi

                    pulumi stack select dev \
                      -C UnoCash.Pulumi \
                      --secrets-provider="azurekeyvault://$KEYVAULT/keys/pulumi"

                    pulumi destroy -C UnoCash.Pulumi --yes